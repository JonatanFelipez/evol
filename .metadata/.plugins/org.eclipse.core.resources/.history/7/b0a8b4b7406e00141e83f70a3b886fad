module SIGModelMetrics::UnitSize
import Prelude;
import String;
import IO;

//Java Parsing libraries
import lang::java::m3::Core;
import lang::java::jdt::m3::Core;

//Utility Libraries
import SIGModelMetrics::Lib::StringCleaning;
import SIGModelMetrics::Lib::CodeCleaning;

map[str,int] sizes = (
	"++" : 0,
	"+"  : 21,
	"o"  : 51,
	"-"  : 101
);

list[str] ranking = ["-", "o", "+", "++"];

public void unitSizeProject(loc project)
{
 	model =  createM3FromEclipseProject(project);
 	unitSizeMetric(model);	
}
//TODO: test
public void unitSizeMetric(M3 model)
{
	println("============= Unit Size ==============");
	println("calculating size of units profile...\r\n");
	map[str,int] sizeOfUnits = unitSize(model);
	println("Metric not yet implemented!");
	
	map[str,str] result = ();
	map[str,int] methods = unitSize(model);
	
	for(str m <- methods)
		for(i <- ranking)
			if(methods[m] > size[i]){
				result += (m : i);
				break;
			}
	
	map[str, int] avgRisk = calcAvgRisk(result);
	for (k <- avgRisk) 
		println("ranking <k>: <avgRisk[k]> units");

	/*
	println("Done! System risk due to overal volume:");
	if(linOCode > sizes["--"]){
		println("-- (very high)");
		println("Motivation: LoC (<linOCode>) bigger than " + sizeStr["--"] );}
	if(linOCode > sizes["-"]){
		println("- (high)");
		println("Motivation: LoC (<linOCode>) smaller than " + sizeStr["--"] );}
	if(linOCode > sizes["o"]){  
		println("o (medium)");
		println("Motivation: LoC (<linOCode>) smaller than " + sizeStr["-"] );}
	if(linOCode > sizes["+"]){  
		println("+ (low)");
		println("Motivation: LoC (<linOCode>) smaller than " + sizeStr["o"] );}
	if(linOCode > sizes["++"]) {
		println("++ (very low)");
		println("Motivation: LoC (<linOCode>) smaller than " + sizeStr["+"] );} 	
	*/
}

//TODO: Test
public map[str,int] calcAvgRisk(map[str,str] riskCatDistr)
{
	map[str, int] riskCatCount = ();
	
	for(k <- riskCatDistr)
	{
		if(riskCatDistr[k] in riskCatCount)
			riskCatCount += (k : (riskCounter[k] + 1));
		else
			riskCatCount += (s : 1);
	}
	return riskCatCount;
}

public map[str,int] unitSize(M3 model)
{
	set[loc] docloc = range(model@documentation); //location of all documentation in the project	
	set[loc] filelocs = files(model);

	//get all method declarations in the project
	methLocs = { dec | dec <- model@declarations, dec[0].scheme == "java+method"};
	 
	map[str, int] method2LoC = ();
	//map a method filepath to the line
	for(method <- methLocs)
	{
	  //get all documentation in the file that contains the method 
	  docsInFile = { doc | doc <- docloc, doc.path == method[1].path};
	  cleanMethod = filterDocInMethod(model, method[1], docsInFile, false);	 
	 
	  method2LoC = method2LoC + (method[0].path : size(split("\r\n", cleanMethod)));
	}	
	return method2LoC;
	
}