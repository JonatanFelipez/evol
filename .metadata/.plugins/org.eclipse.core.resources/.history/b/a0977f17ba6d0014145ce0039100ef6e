module SIGModelMetrics::Lib::StringCleaning

import Prelude;
import String;
import IO;

/* STRING MANIPULATION */
//remove all excess whitespace from a string
public str filterExcessWhiteSpace(str source)
{
	allLines = split("\r\n", source);
	//filter whitespace lines
	lines = [line | line <- allLines, !(/^\s*$/ := line)];
	
	cleanSource = "";	
	for(line <- lines)
	{
	 	//remove tabs and excess whitespace
	 	spaceline = split(" ", trim(replaceAll(line, "\t", "")));
	 	
	 	//rebuild source without all excess whitespace
	    cleanSource = cleanSource + 
	    	intercalate(" ", [x | x <- spaceline, x != ""]);
	}
}

//remove all whitespace lines from a string
public str filterEmptyLines(str source)
{
	//split on windows newline
	lines = split("\r\n", source);
	
	//filter out lines that are empty
	return intercalate("\r\n", [line | line <- lines, !(/^\s*$/ := line)]);
}

//replace each character of substring with replacement string
public str replSubStr(str source, int iStart, int iEnd, str replacement)
{
    //<pre comment string> + <space> + <post comment string>	
    return substring(source, 0, iStart) +
	  	   ("" | it + replacement | e <- [0..(iEnd - iStart)]) +
	   	   substring(source, iEnd, size(source));	  
}

/* DOCUMENTATION REMOVAL */

//filter documentation out of file
public int filterDocInFile(M3 model, loc file, set[loc] commentsInFile)
{
	fileStr = readFile(file);
	
	//loop through documentation elements, convert to spaces
	for(docloc <- commentsInFile)
	{	  
	  //<pre comment string> + <space> + <post comment string>
	  filetext = replSubStr(filetext, 
	  						docloc.offset, 
	  						docloc.offset + size(readFile(docloc)), 
	  						" ");
	}
	
	return filterEmptyLines(filetext);
}

