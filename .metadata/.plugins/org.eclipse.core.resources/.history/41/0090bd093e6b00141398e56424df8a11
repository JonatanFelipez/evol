module TestModule

import Prelude;
import lang::java::m3::Core;
import lang::java::jdt::m3::AST;
import lang::java::jdt::m3::Core;

import IO;
import String;

//project location
loc project = |project://smallsql|;
loc testfile = |project://Lab1/src/Testcase.java|;

public void main2() 
{
	//m3 model
	model = createM3FromEclipseProject(project);	
	
	//lines of code
	classloc = classes(model);
	println(
		sum([ countLinesOfClass(i) | i <- classloc ]) 
		);
			
	docSections = model@documentation;
	
} 

public M3 makeModel()
{
	return createM3FromEclipseProject(project);
}

public int countLinesOfClass(loc classLoc)
{
	classStr = readFile(classLoc);
	
	filterComments(classStr);
	
	return size(filterComments(linesInClass));
}

public void test1()
{
	classText = readFile(|project://Lab1/src/Testcase.java|);
	//println(classText);
	//println(filterComments(classText));
	filterComments(classText);
}

public void filterComments(M3 model, loc file)
{
	//convert file to text
	str filetext = readFile(file);
	
	//loop through documentation elements, convert to spaces
	for(docloc <- range(model@documentation))
	{
	  //convert file location into string
	  docstring = readFile(docloc);
      
      //build up space string that is as long as the comment 
	  space = ("" | it + " " | int e <- [1..docloc.length + 1]);
	  
	  //<pre comment string> + <space> + <post comment string>
	  filetext = substring(filetext, 0, docloc.offset ) +
	  			 space +
	   			 substring(filetext, docloc.offset + size(docstring), size(filetext));
	   				   			  
	}
	
	filterWhitespace(filetext);
	
	//return filetext;
}

public void filterWhitespace(str text)
{
	list[str] lines = split("\r\n",text);
	
	edited = [line | line <- lines, /\s/ := line];
	
	println(edited);
	
	
	
}

public void volume(M3 model, set[Declaration] ast) 
{
	

	//Filter comments
	//model2 = filterComments(model);
	
	//Lines of code	
	
	//Number of units
}

public void unitSize(M3 model)
{
	
}

public void getdocumentation(M3 model)
{
	{printLine("<x>: <isOnlyComment(x)>")| x <- model@documentation};	
}

public void unitComplexity(M3 model)
{
	//Filter comments
	
}

public void duplication(M3 model)
{
	//strategy: for each 6 line of code, check if they appear elsewhere
}